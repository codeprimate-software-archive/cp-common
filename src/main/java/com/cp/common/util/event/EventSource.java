/*
 * EventSource.java (c) 7 November 2004
 *
 * Copyright (c) 2003, Codeprimate
 * All Rights Reserved
 * @author John J. Blum
 * @version 2009.9.5
 * @see com.cp.common.util.event.EventHandler
 * @see com.cp.common.util.event.EventQueue
 * @see java.util.EventObject
 */

package com.cp.common.util.event;

import com.cp.common.lang.Assert;
import java.util.EventObject;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public abstract class EventSource {

  private final List<EventHandler> eventListeners = new LinkedList<EventHandler>();

  protected final Log logger = LogFactory.getLog(getClass());

  /**
   * Adds the specified EventHandler that listens for and handles events generated by this EventSource.
   * @param listener the EventHandler listening for events from this EventSource.
   * @return a boolean value indicating whether the specified EventHandler was successfully added as a listener
   * to this EventSource.
   * @see EventSource#removeListener(EventHandler)
   */
  public boolean addListener(final EventHandler listener) {
    Assert.notNull(listener, "Cannot add a null event handler (listener) to this event source ("
      + getClass().getName() + ")!");
    return eventListeners.add(listener);
  }

  /**
   * Called by the EventSource implementor to notify EventHandlers (listeners) of this EventSource that the specified
   * event occurred.
   * @param event an EventObject used to nofity EventHandlers (listeners) of an event generated by this EventSource.
   */
  protected void notifyListeners(final EventObject event) {
    for (final EventHandler listener : eventListeners) {
      listener.handle(event);
    }
  }

  /**
   * Removes the specified EventHandler from listening to events generated by this EventSource.
   * @param listener the EventHandler to remove from listening of events by this EventSource.
   * @return a boolean value indicating whether the spcified EventHandler was successfully removed from the listeners
   * listening for events from this EventSource.
   * @see EventSource#addListener(EventHandler)
   */
  public boolean removeListener(final EventHandler listener) {
    return eventListeners.remove(listener);
  }

}
